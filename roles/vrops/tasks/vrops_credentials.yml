---

# ----------------------- Destructive Only: Teardown of Credentials, Adapters, Resources

- name: Get All Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/credentials
    method: GET
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 200
    return_content: yes
  register: pre_existing_credentials
  no_log: "{{ enable_no_log }}"
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: Filter out protected credential instances from future tasks
  determine_watchlisted_credential_instances:
    credential_instances: "{{ pre_existing_credentials.json.credentialInstances }}"
    credential_watchlist: "{{ credential_watchlist }}"
  no_log: "{{ enable_no_log }}"
  register: watchlisted_credentials
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: Get All Adapter Instances Using Purgeable Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/credentials/{{ item.id }}/adapters
    method: GET
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 200
    return_content: yes
  register: adapter_instances_using_credentials
  with_items: "{{ watchlisted_credentials.purgeable_credentials }}"
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  no_log: "{{ enable_no_log }}"
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: Get All Resources Using Purgeable Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/credentials/{{ item.id }}/resources
    method: GET
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 200
    return_content: yes
  register: resources_using_credentials
  with_items: "{{ watchlisted_credentials.purgeable_credentials }}"
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  no_log: "{{ enable_no_log }}"
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: JSON Query for Purgeable Credential IDs to be Deleted
  set_fact:
    resource_ids_to_be_deleted:
      "{{ resources_using_credentials|json_query(\"results[*].json.resourceList[*].identifier | []\") }}"
    adapter_ids_to_be_deleted:
      "{{ adapter_instances_using_credentials|json_query(\"results[*].json.adapterInstancesInfoDto[*].id | []\") }}"
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

# - name: Tell All vCenter Adapters to STOP Monitoring (aka Collecting)
#   uri:
#     url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/adapters/{{ item }}/monitoringstate/stop
#     method: PUT
#     body: "{{ lookup('template', 'vsphere-adapter-stop-monitoring.json') }}"
#     body_format: json
#     user: "{{ default_admin_user }}"
#     password: "{{ svc_vrops_admin_password }}"
#     force_basic_auth: yes
#     headers:
#       Content-Type: "application/json;charset=UTF-8"
#       Accept: "application/json;charset=UTF-8"
#     validate_certs: no
#     timeout: 3600
#     status_code: 200
#     return_content: yes
#   register: vcenter_stop_monitoring_result
#   no_log: "{{ enable_no_log }}"
#   with_items: "{{ adapter_ids_to_be_deleted }}"
#   tags:
#     - vrops_credentials
#     - vrops_credential_watchlist

- name: Delete All Resources Using Purgeable Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/resources/{{ item }}
    method: DELETE
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 204, 404  # resources may get automatically deleted when adapters get deleted
    return_content: yes
  register: deleted_resources
  with_items: "{{ resource_ids_to_be_deleted }}"
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  no_log: "{{ enable_no_log }}"
  retries: 30
  delay: 3
  until: deleted_resources.status == 404
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: Delete All Adapter Instances Using Purgeable Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/adapters/{{ item }}
    method: DELETE
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 204, 404
    return_content: yes
  register: deleted_adapters
  with_items: "{{ adapter_ids_to_be_deleted }}"
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  no_log: "{{ enable_no_log }}"
  retries: 30
  delay: 3
  until: deleted_adapters.status == 404
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: Pause to Allow Asynchronous vROps Transactions to Complete
  pause:
    seconds: 5
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  no_log: "{{ enable_no_log }}"
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: Delete All Purgeable Credentials (once resources are asynchronously deleted in vROps)
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/credentials/{{ item.id }}
    method: DELETE
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 204
    return_content: yes
  register: credential_deletion_results
  with_items: "{{ watchlisted_credentials.purgeable_credentials }}"
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  no_log: "{{ enable_no_log }}"
  retries: 30
  delay: 8
  until: credential_deletion_results.status == 204
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

- name: Pause to Allow Purged Credentials to Delete
  pause:
    seconds: 3
  when:
    - watchlisted_credentials.purgeable_credentials|length > 0
  no_log: "{{ enable_no_log }}"
  tags:
    - vrops_credentials
    - vrops_credential_watchlist

# ----------------------- Nondestructive: Creation of vCenter Credentials

- name: Create All vSphere Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/credentials
    body: "{{ lookup('template', 'create-vc-credential.json') }}"
    body_format: json
    method: POST
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 201, 422
    return_content: yes
  register: vc_credential_creation_result
  no_log: "{{ enable_no_log }}"
  with_items: "{{ credentials }}"
  when: item.type == 'vc'
  tags:
    - vrops_credentials

- name: Create All vRA Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/credentials
    body: "{{ lookup('template', 'create-vra-credential.json') }}"
    body_format: json
    method: POST
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 201, 422
    return_content: yes
  register: vra_credential_creation_result
  no_log: "{{ enable_no_log }}"
  with_items: "{{ credentials }}"
  when: item.type == 'vra'
  tags:
    - vrops_credentials

- name: Create All HPE OneView Credentials
  uri:
    url: https://{{ vrops_nodes.master.ip_address }}/suite-api/api/credentials
    body: "{{ lookup('template', 'create-hpov-credential.json') }}"
    body_format: json
    method: POST
    user: "{{ default_admin_user }}"
    password: "{{ svc_vrops_admin_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
      Accept: "application/json;charset=UTF-8"
    validate_certs: no
    timeout: 3600
    status_code: 201, 422, 404  # 404 is thrown when retries are needed, read below
    return_content: yes
  retries: 50  # Retries are needed because this code sometimes executes before the credential type can be created
  delay: 10    # Retries for other credential types (vRA/VC) aren't needed because they're built-in to vROps
  until: hpov_credential_creation_result.status == 201 or hpov_credential_creation_result.status == 422
  register: hpov_credential_creation_result
  no_log: "{{ enable_no_log }}"
  with_items: "{{ credentials }}"
  when: item.type == 'hpeoneview'
  tags:
    - vrops_credentials
